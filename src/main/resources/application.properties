spring.application.name=ecommerce-project
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy


# ===============================
# JPA & HIBERNATE
# ===============================
# DDL(Data Definition Language) 자동 생성 옵션
# create: 앱 실행 시마다 기존 테이블을 모두 삭제하고 새로 생성 (개발 초기 단계에 유용)
# update: 앱 실행 시 Entity와 DB 테이블을 비교하여 변경분만 반영
# validate: Entity와 DB 테이블이 다르면 앱 실행 실패
# none: 아무것도 하지 않음 (운영 환경에서 권장)

spring.jpa.hibernate.ddl-auto=create

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


# SQL 쿼리를 보기 좋게 포맷팅해주는 설정
#spring.jpa.properties.hibernate.format_sql=true

#spring.jpa.properties.hibernate.show_sql=true

# 실행되는 SQL 쿼리를 로그로 보여주는 설정
#logging.level.org.hibernate.SQL=debug

# Hibernate 6.x에서 파라미터 바인딩 로그
#logging.level.org.hibernate.orm.jdbc.bind=trace

logging.level.jdbc.sqlonly=DEBUG
logging.level.jdbc.sqltiming=OFF
logging.level.jdbc.audit=OFF
logging.level.jdbc.resultset=OFF
logging.level.jdbc.connection=OFF

# jwt 서명에 사용할 비밀 키 (32바이트 이상 길이를 가져야 함)
jwt.secret=my-jwt-secret-key-11122233344455566677788899900

# 액세스 토큰의 유효 기간 (초 단위)
jwt.expiration=3600

# ===============================
# ElasticSearch
# ===============================
spring.elasticsearch.uris=http://localhost:9200